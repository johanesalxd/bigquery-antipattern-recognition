# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

prompts:
  - name: WhereOrder
    description: |
      You know that the order of predicates in a where condition impacts
      performance. More restrictive filters such as equality filters should be
      applied first. More complex filters such as a like filter should be
      applied last. This will increase performance. The ideal order is to have 
      equality filters '=', followed by greater than '>' or lesser than '<' filters,
      followed by 'greater than or equal' '>=' or 'lesser than or equal' '<=', 
      followed by not equal '!=' or '<>' filters, followed by like filters
    examples:
    - "Input:\n select col1 from table1 where col2 like '%%asd%%' AND col3 = 'a';\n\
      Output:\n select col1 from table1 where col3 = 'a' and col2 like '%%asd%%';\n\
      Since the more restrictive equality filter is applied first then query will perform better"
    - "Input:\n select col1 from tbl1 where col4 like '%%a%%' and col1=1 and col2>1 and col6 >= 1 and col5 != 1 and col7 <= 1 and col3<1 and col5 <> 1;\n\
      Output:\n select col1 from tbl1 where col1=1 and col3<1 and col2>1 and col6 >= 1 and col7 <= 1 and col5 != 1 and col5 <> 1 and col4 like '%%a%%';\n\
      Since the more restrictive are applied first the perform is better"
  - name: StringComparison
    description: | 
      You know that in a predicate in a where string using a like is simpler and 
      more efficient than using regexp_contains. Simple regex such as 
      `col1 = regexp_contains(col1, '.*some_string.*')` can be re written to 
      like `col1 like '%%some_string%%'`.
    examples:
        - "select col1 from table1 where col1 = regexp_contains(col1, '.*some_string.*')\n\
           Performance will increase by using a like condition in the filter instead of the regexp_contains\n\
           select col1 from table1 where col1 like '%%some_string%%';"
  - name: SemiJoinWithoutAgg
    description: |
      You know that having a query predicate in a where without an aggregation might cause an issue.
      For example
      SELECT col1 FROM table1 WHERE col2 in (select col1 from table2)
      The sub-query used for the IN filter (select col1 from table2) does not have an aggregation.
      Performance will increase if a distinct is added.
    examples:
    - "SELECT col1 FROM table1 WHERE col2 in (select col1 from table2)\n\
       performance will increase by adding a DISTINCT to the subquery as shown below\n\
       SELECT col1 FROM table1 WHERE col2 in (select distinct col1 from table2)"
  - name: CTEsEvalMultipleTimes
    description: |
      You know that contents of a WITH statement will be inlined every place the alias is referenced. 
      This could lead to negative performance impact. For better performance a WITH statement referenced more than once 
      should be re written as a temp table to avoid computing the same statement more than once.
    examples:
    - "with a as (select col1 from table1 group by col1),\n\
        b as (select col1 from a),\n\
        c as (select col1 from a)\n\
       SELECT\n\
           b.col1, c.col1\n\
       FROM\n\
           b,c\n\
       Performance will increase by making the initial with statement a temp table.\n\
       create temp table a as (select col1 from table1 group by col1);\n\
       with b as (select col1 from a),\n\
       c as (select col1 from a)\n\
       SELECT\n\
           b.col1, c.col1\n\
       FROM\n\
           b,c\n"
  - name: OrderByWithoutLimit
    description: |
      You know that ordering a large amount of rows has a considerable computational cost. 
      Performance enhancements can be obtained be adding a LIMIT after the outermost order by
    examples:
    - "select col1 from table1 order by col1;\n\
       Performance will increase by adding a limit\n\
       select col1 from table1 order by col1 limit 1000;\n"
  - name: LatestRecordWithAnalyticFun
    description: |
      You know that ROW_NUMBER() function is frequently used to get the latest record of a given partition. 
      You also know using ARRAY_AGG() in BigQuery instead of ROW_NUMBER() for this purpose yields better performance
    examples:
    - "select\n\
         * except(rn)\n\
       from (\n\
         select *,\n\ 
           row_number() over(\n\
             partition by id \n\
             order by created_at desc) rn\n\
         from \n\
           `dataset.table` t\n\
       )\n\
       where rn = 1\n\
       Performance will increase by using an ARRAY_AGG() as shown below.\n\
       select  \n\
         event.* \n\
       from (\n\
         select array_agg(\n\
           t order by t.created_at desc limit 1\n\
         )[offset(0)] event\n\
         from \n\
           `dataset.table` t\n\ 
         group by \n\
           id);\n"
  - name: DynamicPredicate
    description: |
      You know that computing a query within a predicate in a where is not ideal for performance.
      It is best to compute the sub-query and store the result in a variable
      Note this is only applicable when the sub-query returns a single value, this is then operators such as equal, 
      lesser than or greater than are used
    examples:
    - "select col1 from table1 where col2 = (select max(col3) from table2)\n\
       it would be better to rewrite as follows:\n\
       declare var1 [DATATYPE] DEFAULT (select 'a'); --add corresponding datatype here\n\
       select col1 from table1 where col2 = var1;\n\
       Note that since we do not know the datatype of the column used in the\n\ 
       predicate we will leave a placeholder [dataype] so that somebody can manually replace the datatype\n"
    - "select descript FROM dataset.tbl2 WHERE unique_key in (select sk FROM dataset.tbl1);\n\
       it would be better to rewrite as follows:\n\
       DECLARE var1 ARRAY<[DATATYPE]> DEFAULT (select ARRAY_AGG(sk) FROM dataset.tbl1 );  --add corresponding datatype here\n\
       select descript FROM dataset.tbl2 WHERE unique_key in UNNEST(var1);\n\  
       Note that since this is an IN filter, we need to store the result of the subquery in an array that is why we have DECLARE var1 ARRAY<[DATATYPE]\n\
       Since we don't know the datatype of sk we will leave a placeholder [DATATYPE] so that somebody can manually replace the datatype\n\
       Since the var is an array we need to UNNEST it in the where clause, that is why we have ... unique_key in UNNEST(var1)"
  - name: JoinOrder
    description: |
      You know that for optimal performance the first table in a JOIN should be the largest.
    examples:
    - "SELECT\n\ 
           col1,\n\
           count(1) ct\n\
       FROM \n\
           table1 t1\n\
       JOIN\n\
           table2 t2 ON t1.col2=t2.col2;\n\
           
       Assuming table2 is bigger than table1 the following syntax would yield a higher performance:
       SELECT \n\
           col1,\n\
           count(1) ct\n\
       FROM \n\
           table2 t2\n\
       JOIN\n\
           table1 t1 ON t1.col2=t2.col2\n;"
  - name: ConvertTableToTemp
    description: |
      You know that if a table is dropped in a script that it should be converted to TEMP to avoid additional storage costs.
    examples:
    - "CREATE TABLE mydataset.table (id STRING); \n
       DROP TABLE mydataset.table; \n
       Storage costs will be reduced by converting mydataset.table to temporary: \n
       CREATE TEMP TABLE mydataset.table(id STRING); \n
       DROP TABLE mydataset.table; \n
    -  CREATE TABLE mydataset.example AS ( SELECT 1 ); \n
       DROP TABLE mydataset.example; \n
       Storage costs will be reduced by converting mydataset.table to temporary: \n
       CREATE TEMP TABLE mydataset.example AS ( SELECT 1 ); \n
       DROP TABLE mydataset.example;"
  - name: MissingDropStatement
    description: |
      You know that TEMP tables should be dropped at the end of a script to avoid additional storage costs.
    examples:
    - "CREATE TEMP TABLE mydataset.table (id STRING); \n
       Storage costs will be reduced by dropping the TEMP table: \n
       CREATE TEMP TABLE mydataset.table(id STRING); \n
       DROP TABLE mydataset.table; \n"
    - "CREATE TEMP TABLE mydataset.table AS ( SELECT 1 ); \n
       Storage costs will be reduced by dropping the TEMP table: \n
       CREATE TEMP TABLE mydataset.tableAS ( SELECT 1 ); \n
       DROP TABLE mydataset.table; \n"
  - name: ClusteringKeysUsedCheck
    description: |
      You know that table clustering improves query performance by pruning data blocks when clustering keys are used in predicates.
      This anti-pattern occurs when a query reads from a clustered table, but none of the table's clustering keys are referenced
      in `WHERE` clause predicates, `JOIN ON` conditions, or `GROUP BY` clauses. In such cases, the clustering provides little
      to no performance benefit for this specific query, as BigQuery cannot effectively prune blocks based on the clustering keys.
    examples:
    - "Input (Table `proj.dataset.events` clustered by `event_date`, `user_id`):\n\
      SELECT \n\
      session_id, event_name \n\
      FROM \n\
      `proj.dataset.events` \n\
      WHERE \n\
      source_system = 'SystemA';\n\
      Output:\n\
      Table: proj.dataset.events is clustered by [event_date, user_id], but these keys were not referenced in WHERE, JOIN ON, or GROUP BY clauses. Clustering might not provide significant benefits for this query.\n\
      Consider adding filters on `event_date` or `user_id` if applicable to leverage clustering, or evaluate if clustering is beneficial for the common query patterns on this table."
  - name: FunctionOnClusteringKeyCheck
    description: |
      You know that applying functions directly to a clustering key column within a query predicate prevents BigQuery from effectively
      using the clustering to prune data blocks. For example, using `CAST(cluster_col AS STRING) = 'value'` or `DATE(cluster_timestamp) = '2024-01-01'`
      requires BigQuery to compute the function result for each row before comparing, negating the benefit of the pre-sorted clustered data.
      Performance is improved by applying functions to constants or parameters instead, allowing direct comparison against the raw clustering key column.
    examples:
    - "Input (Table `proj.dataset.logs` clustered by `log_timestamp`):\n\
        SELECT \n\
          message \n\
        FROM \n\
          `proj.dataset.logs` \n\
        WHERE \n\
            DATE(log_timestamp) = '2024-04-21';\n\
      Output:\n\
          Potential anti-pattern: Function 'DATE' used on clustering key 'log_timestamp' of table 'proj.dataset.logs' within a predicate ($equal). This often prevents cluster pruning. Consider applying functions to constants/parameters instead (e.g., `key = FUNC(value)` instead of `FUNC(key) = value`).\n\
          Rewrite Suggestion:\n\
          SELECT \n\
            message \n\
          FROM \n\
            `proj.dataset.logs` \n\
          WHERE \n\
            log_timestamp >= '2024-04-21 00:00:00' AND log_timestamp < '2024-04-22 00:00:00';\n"
    - "Input (Table `proj.dataset.orders` clustered by `order_id` (INT64)):\n\
        SELECT \n\
          order_value \n\
        FROM \n\
          `proj.dataset.orders` \n\
        WHERE \n\
            CAST(order_id AS STRING) = '12345';\n\
      Output:\n\
          Potential anti-pattern: Function 'CAST' used on clustering key 'order_id' of table 'proj.dataset.orders' within a predicate ($equal). This often prevents cluster pruning. Consider applying functions to constants/parameters instead (e.g., `key = FUNC(value)` instead of `FUNC(key) = value`).\n\
          Rewrite Suggestion:\n\
          SELECT \n\
            order_value \n\
          FROM \n\
            `proj.dataset.orders` \n\
          WHERE \n\
            order_id = 12345; -- Or CAST('12345' AS INT64)\n"
  - name: ClusteringColumnComparisonCheck
    description: |
      You know that comparing columns directly can sometimes be less efficient than comparing columns to constants or parameters, especially in join conditions or filters.
      This anti-pattern identifies predicates (in `WHERE` or `JOIN ON` clauses) that directly compare a clustering key column from one table
      against a clustering key column from another table (or the same table). While sometimes necessary for the query logic, such direct comparisons
      between clustered columns might limit the query planner's ability to fully utilize cluster pruning or choose the most optimal join strategies.
    examples:
    - "Input (Table `proj.dataset.users` clustered by `user_id`, Table `proj.dataset.activity` clustered by `user_id`):\n\
        SELECT\n\
          u.user_name, a.activity_type\n\
        FROM\n\
          `proj.dataset.users` u\n\
        JOIN\n\
          `proj.dataset.activity` a ON u.user_id = a.user_id;\n\
      Output:\n\
        Potential anti-pattern: Comparison ($equal) between two clustering keys: 'proj.dataset.users.user_id' and 'proj.dataset.activity.user_id'. Comparing clustering keys directly against each other can be inefficient and may hinder cluster pruning.\n\
        Consider if pre-filtering one side based on other criteria is possible before the join."
    - "Input (Table `proj.dataset.events` clustered by `event_date`, `session_id`):\n\
        SELECT event_name FROM `proj.dataset.events` WHERE event_date = session_id;\n\
      Output:\n\
        Potential anti-pattern: Comparison ($equal) between two clustering keys: 'proj.dataset.events.event_date' and 'proj.dataset.events.session_id'. Comparing clustering keys directly against each other can be inefficient and may hinder cluster pruning.\n\
        Verify if this comparison logic is intended."
  - name: ClusteringOrderCheck
    description: |
      You know that for tables with multiple clustering keys (e.g., CLUSTER BY keyA, keyB, keyC), maximum performance benefits are achieved
      when filter predicates (especially equality) are applied sequentially on a prefix of these keys, in the defined order.
      This anti-pattern occurs when filter predicates reference clustering keys using equality, but skip one or more keys in the prefix order.
      For instance, filtering on `keyA` and `keyC` without an equality filter on `keyB` prevents optimal pruning based on `keyC`.
    examples:
    - "Input (Table `proj.dataset.sales` clustered by `region`, `product_category`, `sale_date`):\n\
        SELECT \n\
          SUM(amount) \n\
        FROM \n\
          `proj.dataset.sales` \n\
        WHERE \n\
          region = 'West' \n\
          AND sale_date = '2024-04-21'; -- Skips 'product_category'\n\
      Output:\n\
        Table: proj.dataset.sales is clustered by [region, product_category, sale_date]. Filters using keys [region, sale_date] might not optimally use clustering because key 'product_category' is missing from the filter predicate prefix. For best performance, filter sequentially on clustering keys.\n\
        Consider adding an equality filter for `product_category` if appropriate, or understand that pruning on `sale_date` will be less effective."
    - "Input (Table `proj.dataset.sales` clustered by `region`, `product_category`, `sale_date`):\n\
        SELECT \n\
          SUM(amount) \n\
        FROM \n\
          `proj.dataset.sales` \n\
        WHERE \n\
            product_category = 'Electronics' \n\
            AND region = 'West'; -- Keys present, but potentially suboptimal predicate order\n\
      Output:\n\
        Table: proj.dataset.sales is clustered by [region, product_category, sale_date]. Filters using keys [product_category, region] might not optimally use clustering because key 'region' is missing from the filter predicate prefix. For best performance, filter sequentially on clustering keys.\n\
        (Note: While BQ planner might reorder, explicitly filtering `region` first aligns better with clustering)."